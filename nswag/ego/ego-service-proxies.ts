//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');


export class ApiKeyResponse implements IApiKeyResponse {
    description?: string | undefined;
    expiryDate?: Date | undefined;
    isRevoked?: boolean | undefined;
    issueDate?: Date | undefined;
    name?: string | undefined;
    scope?: string[] | undefined;

    [key: string]: any;

    constructor(data?: IApiKeyResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.description = _data["description"];
            this.expiryDate = _data["expiryDate"] ? new Date(_data["expiryDate"].toString()) : <any>undefined;
            this.isRevoked = _data["isRevoked"];
            this.issueDate = _data["issueDate"] ? new Date(_data["issueDate"].toString()) : <any>undefined;
            this.name = _data["name"];
            if (Array.isArray(_data["scope"])) {
                this.scope = [] as any;
                for (let item of _data["scope"])
                    this.scope!.push(item);
            }
        }
    }

    static fromJS(data: any): ApiKeyResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ApiKeyResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["description"] = this.description;
        data["expiryDate"] = this.expiryDate ? this.expiryDate.toISOString() : <any>undefined;
        data["isRevoked"] = this.isRevoked;
        data["issueDate"] = this.issueDate ? this.issueDate.toISOString() : <any>undefined;
        data["name"] = this.name;
        if (Array.isArray(this.scope)) {
            data["scope"] = [];
            for (let item of this.scope)
                data["scope"].push(item);
        }
        return data;
    }

    clone(): ApiKeyResponse {
        const json = this.toJSON();
        let result = new ApiKeyResponse();
        result.init(json);
        return result;
    }
}

export interface IApiKeyResponse {
    description?: string | undefined;
    expiryDate?: Date | undefined;
    isRevoked?: boolean | undefined;
    issueDate?: Date | undefined;
    name?: string | undefined;
    scope?: string[] | undefined;

    [key: string]: any;
}

export class ApiKeyScopeResponse implements IApiKeyScopeResponse {
    client_id?: string | undefined;
    exp?: number | undefined;
    scope?: string[] | undefined;
    user_id?: string | undefined;

    [key: string]: any;

    constructor(data?: IApiKeyScopeResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.client_id = _data["client_id"];
            this.exp = _data["exp"];
            if (Array.isArray(_data["scope"])) {
                this.scope = [] as any;
                for (let item of _data["scope"])
                    this.scope!.push(item);
            }
            this.user_id = _data["user_id"];
        }
    }

    static fromJS(data: any): ApiKeyScopeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ApiKeyScopeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["client_id"] = this.client_id;
        data["exp"] = this.exp;
        if (Array.isArray(this.scope)) {
            data["scope"] = [];
            for (let item of this.scope)
                data["scope"].push(item);
        }
        data["user_id"] = this.user_id;
        return data;
    }

    clone(): ApiKeyScopeResponse {
        const json = this.toJSON();
        let result = new ApiKeyScopeResponse();
        result.init(json);
        return result;
    }
}

export interface IApiKeyScopeResponse {
    client_id?: string | undefined;
    exp?: number | undefined;
    scope?: string[] | undefined;
    user_id?: string | undefined;

    [key: string]: any;
}

export class Application implements IApplication {
    clientId?: string | undefined;
    clientSecret?: string | undefined;
    description?: string | undefined;
    errorRedirectUri?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    redirectUri?: string | undefined;
    status?: ApplicationStatus | undefined;
    type?: ApplicationType | undefined;

    [key: string]: any;

    constructor(data?: IApplication) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.clientId = _data["clientId"];
            this.clientSecret = _data["clientSecret"];
            this.description = _data["description"];
            this.errorRedirectUri = _data["errorRedirectUri"];
            this.id = _data["id"];
            this.name = _data["name"];
            this.redirectUri = _data["redirectUri"];
            this.status = _data["status"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): Application {
        data = typeof data === 'object' ? data : {};
        let result = new Application();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["clientId"] = this.clientId;
        data["clientSecret"] = this.clientSecret;
        data["description"] = this.description;
        data["errorRedirectUri"] = this.errorRedirectUri;
        data["id"] = this.id;
        data["name"] = this.name;
        data["redirectUri"] = this.redirectUri;
        data["status"] = this.status;
        data["type"] = this.type;
        return data;
    }

    clone(): Application {
        const json = this.toJSON();
        let result = new Application();
        result.init(json);
        return result;
    }
}

export interface IApplication {
    clientId?: string | undefined;
    clientSecret?: string | undefined;
    description?: string | undefined;
    errorRedirectUri?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    redirectUri?: string | undefined;
    status?: ApplicationStatus | undefined;
    type?: ApplicationType | undefined;

    [key: string]: any;
}

export class ApplicationPermission implements IApplicationPermission {
    accessLevel?: ApplicationPermissionAccessLevel | undefined;
    id?: string | undefined;
    owner?: Application | undefined;
    policy?: Policy | undefined;

    [key: string]: any;

    constructor(data?: IApplicationPermission) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.accessLevel = _data["accessLevel"];
            this.id = _data["id"];
            this.owner = _data["owner"] ? Application.fromJS(_data["owner"]) : <any>undefined;
            this.policy = _data["policy"] ? Policy.fromJS(_data["policy"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ApplicationPermission {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationPermission();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["accessLevel"] = this.accessLevel;
        data["id"] = this.id;
        data["owner"] = this.owner ? this.owner.toJSON() : <any>undefined;
        data["policy"] = this.policy ? this.policy.toJSON() : <any>undefined;
        return data;
    }

    clone(): ApplicationPermission {
        const json = this.toJSON();
        let result = new ApplicationPermission();
        result.init(json);
        return result;
    }
}

export interface IApplicationPermission {
    accessLevel?: ApplicationPermissionAccessLevel | undefined;
    id?: string | undefined;
    owner?: Application | undefined;
    policy?: Policy | undefined;

    [key: string]: any;
}

export class CreateApplicationRequest implements ICreateApplicationRequest {
    clientId?: string | undefined;
    clientSecret?: string | undefined;
    description?: string | undefined;
    errorRedirectUri?: string | undefined;
    name?: string | undefined;
    redirectUri?: string | undefined;
    status?: CreateApplicationRequestStatus | undefined;
    type?: CreateApplicationRequestType | undefined;

    [key: string]: any;

    constructor(data?: ICreateApplicationRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.clientId = _data["clientId"];
            this.clientSecret = _data["clientSecret"];
            this.description = _data["description"];
            this.errorRedirectUri = _data["errorRedirectUri"];
            this.name = _data["name"];
            this.redirectUri = _data["redirectUri"];
            this.status = _data["status"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): CreateApplicationRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateApplicationRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["clientId"] = this.clientId;
        data["clientSecret"] = this.clientSecret;
        data["description"] = this.description;
        data["errorRedirectUri"] = this.errorRedirectUri;
        data["name"] = this.name;
        data["redirectUri"] = this.redirectUri;
        data["status"] = this.status;
        data["type"] = this.type;
        return data;
    }

    clone(): CreateApplicationRequest {
        const json = this.toJSON();
        let result = new CreateApplicationRequest();
        result.init(json);
        return result;
    }
}

export interface ICreateApplicationRequest {
    clientId?: string | undefined;
    clientSecret?: string | undefined;
    description?: string | undefined;
    errorRedirectUri?: string | undefined;
    name?: string | undefined;
    redirectUri?: string | undefined;
    status?: CreateApplicationRequestStatus | undefined;
    type?: CreateApplicationRequestType | undefined;

    [key: string]: any;
}

export class GenericResponse implements IGenericResponse {
    message?: string | undefined;

    [key: string]: any;

    constructor(data?: IGenericResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): GenericResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GenericResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }

    clone(): GenericResponse {
        const json = this.toJSON();
        let result = new GenericResponse();
        result.init(json);
        return result;
    }
}

export interface IGenericResponse {
    message?: string | undefined;

    [key: string]: any;
}

export class Group implements IGroup {
    description?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    status?: GroupStatus | undefined;

    [key: string]: any;

    constructor(data?: IGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.description = _data["description"];
            this.id = _data["id"];
            this.name = _data["name"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): Group {
        data = typeof data === 'object' ? data : {};
        let result = new Group();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["description"] = this.description;
        data["id"] = this.id;
        data["name"] = this.name;
        data["status"] = this.status;
        return data;
    }

    clone(): Group {
        const json = this.toJSON();
        let result = new Group();
        result.init(json);
        return result;
    }
}

export interface IGroup {
    description?: string | undefined;
    id?: string | undefined;
    name?: string | undefined;
    status?: GroupStatus | undefined;

    [key: string]: any;
}

export class GroupPermission implements IGroupPermission {
    accessLevel?: GroupPermissionAccessLevel | undefined;
    id?: string | undefined;
    owner?: Group | undefined;
    policy?: Policy | undefined;

    [key: string]: any;

    constructor(data?: IGroupPermission) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.accessLevel = _data["accessLevel"];
            this.id = _data["id"];
            this.owner = _data["owner"] ? Group.fromJS(_data["owner"]) : <any>undefined;
            this.policy = _data["policy"] ? Policy.fromJS(_data["policy"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GroupPermission {
        data = typeof data === 'object' ? data : {};
        let result = new GroupPermission();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["accessLevel"] = this.accessLevel;
        data["id"] = this.id;
        data["owner"] = this.owner ? this.owner.toJSON() : <any>undefined;
        data["policy"] = this.policy ? this.policy.toJSON() : <any>undefined;
        return data;
    }

    clone(): GroupPermission {
        const json = this.toJSON();
        let result = new GroupPermission();
        result.init(json);
        return result;
    }
}

export interface IGroupPermission {
    accessLevel?: GroupPermissionAccessLevel | undefined;
    id?: string | undefined;
    owner?: Group | undefined;
    policy?: Policy | undefined;

    [key: string]: any;
}

export class GroupRequest implements IGroupRequest {
    description?: string | undefined;
    name?: string | undefined;
    status?: GroupRequestStatus | undefined;

    [key: string]: any;

    constructor(data?: IGroupRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.description = _data["description"];
            this.name = _data["name"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): GroupRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GroupRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["description"] = this.description;
        data["name"] = this.name;
        data["status"] = this.status;
        return data;
    }

    clone(): GroupRequest {
        const json = this.toJSON();
        let result = new GroupRequest();
        result.init(json);
        return result;
    }
}

export interface IGroupRequest {
    description?: string | undefined;
    name?: string | undefined;
    status?: GroupRequestStatus | undefined;

    [key: string]: any;
}

export class Identifiable implements IIdentifiable {
    id?: any | undefined;

    [key: string]: any;

    constructor(data?: IIdentifiable) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Identifiable {
        data = typeof data === 'object' ? data : {};
        let result = new Identifiable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        return data;
    }

    clone(): Identifiable {
        const json = this.toJSON();
        let result = new Identifiable();
        result.init(json);
        return result;
    }
}

export interface IIdentifiable {
    id?: any | undefined;

    [key: string]: any;
}

export class MaskDTO implements IMaskDTO {
    mask?: MaskDTOMask | undefined;

    [key: string]: any;

    constructor(data?: IMaskDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.mask = _data["mask"];
        }
    }

    static fromJS(data: any): MaskDTO {
        data = typeof data === 'object' ? data : {};
        let result = new MaskDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["mask"] = this.mask;
        return data;
    }

    clone(): MaskDTO {
        const json = this.toJSON();
        let result = new MaskDTO();
        result.init(json);
        return result;
    }
}

export interface IMaskDTO {
    mask?: MaskDTOMask | undefined;

    [key: string]: any;
}

export class OAuth2AccessToken implements IOAuth2AccessToken {
    additionalInformation?: any | undefined;
    expiration?: Date | undefined;
    expired?: boolean | undefined;
    expiresIn?: number | undefined;
    refreshToken?: OAuth2RefreshToken | undefined;
    scope?: string[] | undefined;
    tokenType?: string | undefined;
    value?: string | undefined;

    [key: string]: any;

    constructor(data?: IOAuth2AccessToken) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.additionalInformation = _data["additionalInformation"];
            this.expiration = _data["expiration"] ? new Date(_data["expiration"].toString()) : <any>undefined;
            this.expired = _data["expired"];
            this.expiresIn = _data["expiresIn"];
            this.refreshToken = _data["refreshToken"] ? OAuth2RefreshToken.fromJS(_data["refreshToken"]) : <any>undefined;
            if (Array.isArray(_data["scope"])) {
                this.scope = [] as any;
                for (let item of _data["scope"])
                    this.scope!.push(item);
            }
            this.tokenType = _data["tokenType"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): OAuth2AccessToken {
        data = typeof data === 'object' ? data : {};
        let result = new OAuth2AccessToken();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["additionalInformation"] = this.additionalInformation;
        data["expiration"] = this.expiration ? this.expiration.toISOString() : <any>undefined;
        data["expired"] = this.expired;
        data["expiresIn"] = this.expiresIn;
        data["refreshToken"] = this.refreshToken ? this.refreshToken.toJSON() : <any>undefined;
        if (Array.isArray(this.scope)) {
            data["scope"] = [];
            for (let item of this.scope)
                data["scope"].push(item);
        }
        data["tokenType"] = this.tokenType;
        data["value"] = this.value;
        return data;
    }

    clone(): OAuth2AccessToken {
        const json = this.toJSON();
        let result = new OAuth2AccessToken();
        result.init(json);
        return result;
    }
}

export interface IOAuth2AccessToken {
    additionalInformation?: any | undefined;
    expiration?: Date | undefined;
    expired?: boolean | undefined;
    expiresIn?: number | undefined;
    refreshToken?: OAuth2RefreshToken | undefined;
    scope?: string[] | undefined;
    tokenType?: string | undefined;
    value?: string | undefined;

    [key: string]: any;
}

export class OAuth2RefreshToken implements IOAuth2RefreshToken {
    value?: string | undefined;

    [key: string]: any;

    constructor(data?: IOAuth2RefreshToken) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): OAuth2RefreshToken {
        data = typeof data === 'object' ? data : {};
        let result = new OAuth2RefreshToken();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["value"] = this.value;
        return data;
    }

    clone(): OAuth2RefreshToken {
        const json = this.toJSON();
        let result = new OAuth2RefreshToken();
        result.init(json);
        return result;
    }
}

export interface IOAuth2RefreshToken {
    value?: string | undefined;

    [key: string]: any;
}

export class PageDTO_ApiKeyResponse implements IPageDTO_ApiKeyResponse {
    count?: number | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
    resultSet?: ApiKeyResponse[] | undefined;

    [key: string]: any;

    constructor(data?: IPageDTO_ApiKeyResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.count = _data["count"];
            this.limit = _data["limit"];
            this.offset = _data["offset"];
            if (Array.isArray(_data["resultSet"])) {
                this.resultSet = [] as any;
                for (let item of _data["resultSet"])
                    this.resultSet!.push(ApiKeyResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageDTO_ApiKeyResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PageDTO_ApiKeyResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["count"] = this.count;
        data["limit"] = this.limit;
        data["offset"] = this.offset;
        if (Array.isArray(this.resultSet)) {
            data["resultSet"] = [];
            for (let item of this.resultSet)
                data["resultSet"].push(item.toJSON());
        }
        return data;
    }

    clone(): PageDTO_ApiKeyResponse {
        const json = this.toJSON();
        let result = new PageDTO_ApiKeyResponse();
        result.init(json);
        return result;
    }
}

export interface IPageDTO_ApiKeyResponse {
    count?: number | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
    resultSet?: ApiKeyResponse[] | undefined;

    [key: string]: any;
}

export class PageDTO_ApplicationPermission implements IPageDTO_ApplicationPermission {
    count?: number | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
    resultSet?: ApplicationPermission[] | undefined;

    [key: string]: any;

    constructor(data?: IPageDTO_ApplicationPermission) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.count = _data["count"];
            this.limit = _data["limit"];
            this.offset = _data["offset"];
            if (Array.isArray(_data["resultSet"])) {
                this.resultSet = [] as any;
                for (let item of _data["resultSet"])
                    this.resultSet!.push(ApplicationPermission.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageDTO_ApplicationPermission {
        data = typeof data === 'object' ? data : {};
        let result = new PageDTO_ApplicationPermission();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["count"] = this.count;
        data["limit"] = this.limit;
        data["offset"] = this.offset;
        if (Array.isArray(this.resultSet)) {
            data["resultSet"] = [];
            for (let item of this.resultSet)
                data["resultSet"].push(item.toJSON());
        }
        return data;
    }

    clone(): PageDTO_ApplicationPermission {
        const json = this.toJSON();
        let result = new PageDTO_ApplicationPermission();
        result.init(json);
        return result;
    }
}

export interface IPageDTO_ApplicationPermission {
    count?: number | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
    resultSet?: ApplicationPermission[] | undefined;

    [key: string]: any;
}

export class PageDTO_Application implements IPageDTO_Application {
    count?: number | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
    resultSet?: Application[] | undefined;

    [key: string]: any;

    constructor(data?: IPageDTO_Application) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.count = _data["count"];
            this.limit = _data["limit"];
            this.offset = _data["offset"];
            if (Array.isArray(_data["resultSet"])) {
                this.resultSet = [] as any;
                for (let item of _data["resultSet"])
                    this.resultSet!.push(Application.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageDTO_Application {
        data = typeof data === 'object' ? data : {};
        let result = new PageDTO_Application();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["count"] = this.count;
        data["limit"] = this.limit;
        data["offset"] = this.offset;
        if (Array.isArray(this.resultSet)) {
            data["resultSet"] = [];
            for (let item of this.resultSet)
                data["resultSet"].push(item.toJSON());
        }
        return data;
    }

    clone(): PageDTO_Application {
        const json = this.toJSON();
        let result = new PageDTO_Application();
        result.init(json);
        return result;
    }
}

export interface IPageDTO_Application {
    count?: number | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
    resultSet?: Application[] | undefined;

    [key: string]: any;
}

export class PageDTO_GroupPermission implements IPageDTO_GroupPermission {
    count?: number | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
    resultSet?: GroupPermission[] | undefined;

    [key: string]: any;

    constructor(data?: IPageDTO_GroupPermission) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.count = _data["count"];
            this.limit = _data["limit"];
            this.offset = _data["offset"];
            if (Array.isArray(_data["resultSet"])) {
                this.resultSet = [] as any;
                for (let item of _data["resultSet"])
                    this.resultSet!.push(GroupPermission.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageDTO_GroupPermission {
        data = typeof data === 'object' ? data : {};
        let result = new PageDTO_GroupPermission();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["count"] = this.count;
        data["limit"] = this.limit;
        data["offset"] = this.offset;
        if (Array.isArray(this.resultSet)) {
            data["resultSet"] = [];
            for (let item of this.resultSet)
                data["resultSet"].push(item.toJSON());
        }
        return data;
    }

    clone(): PageDTO_GroupPermission {
        const json = this.toJSON();
        let result = new PageDTO_GroupPermission();
        result.init(json);
        return result;
    }
}

export interface IPageDTO_GroupPermission {
    count?: number | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
    resultSet?: GroupPermission[] | undefined;

    [key: string]: any;
}

export class PageDTO_Group implements IPageDTO_Group {
    count?: number | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
    resultSet?: Group[] | undefined;

    [key: string]: any;

    constructor(data?: IPageDTO_Group) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.count = _data["count"];
            this.limit = _data["limit"];
            this.offset = _data["offset"];
            if (Array.isArray(_data["resultSet"])) {
                this.resultSet = [] as any;
                for (let item of _data["resultSet"])
                    this.resultSet!.push(Group.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageDTO_Group {
        data = typeof data === 'object' ? data : {};
        let result = new PageDTO_Group();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["count"] = this.count;
        data["limit"] = this.limit;
        data["offset"] = this.offset;
        if (Array.isArray(this.resultSet)) {
            data["resultSet"] = [];
            for (let item of this.resultSet)
                data["resultSet"].push(item.toJSON());
        }
        return data;
    }

    clone(): PageDTO_Group {
        const json = this.toJSON();
        let result = new PageDTO_Group();
        result.init(json);
        return result;
    }
}

export interface IPageDTO_Group {
    count?: number | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
    resultSet?: Group[] | undefined;

    [key: string]: any;
}

export class PageDTO_PolicyResponse implements IPageDTO_PolicyResponse {
    count?: number | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
    resultSet?: PolicyResponse[] | undefined;

    [key: string]: any;

    constructor(data?: IPageDTO_PolicyResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.count = _data["count"];
            this.limit = _data["limit"];
            this.offset = _data["offset"];
            if (Array.isArray(_data["resultSet"])) {
                this.resultSet = [] as any;
                for (let item of _data["resultSet"])
                    this.resultSet!.push(PolicyResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageDTO_PolicyResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PageDTO_PolicyResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["count"] = this.count;
        data["limit"] = this.limit;
        data["offset"] = this.offset;
        if (Array.isArray(this.resultSet)) {
            data["resultSet"] = [];
            for (let item of this.resultSet)
                data["resultSet"].push(item.toJSON());
        }
        return data;
    }

    clone(): PageDTO_PolicyResponse {
        const json = this.toJSON();
        let result = new PageDTO_PolicyResponse();
        result.init(json);
        return result;
    }
}

export interface IPageDTO_PolicyResponse {
    count?: number | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
    resultSet?: PolicyResponse[] | undefined;

    [key: string]: any;
}

export class PageDTO_Policy implements IPageDTO_Policy {
    count?: number | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
    resultSet?: Policy[] | undefined;

    [key: string]: any;

    constructor(data?: IPageDTO_Policy) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.count = _data["count"];
            this.limit = _data["limit"];
            this.offset = _data["offset"];
            if (Array.isArray(_data["resultSet"])) {
                this.resultSet = [] as any;
                for (let item of _data["resultSet"])
                    this.resultSet!.push(Policy.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageDTO_Policy {
        data = typeof data === 'object' ? data : {};
        let result = new PageDTO_Policy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["count"] = this.count;
        data["limit"] = this.limit;
        data["offset"] = this.offset;
        if (Array.isArray(this.resultSet)) {
            data["resultSet"] = [];
            for (let item of this.resultSet)
                data["resultSet"].push(item.toJSON());
        }
        return data;
    }

    clone(): PageDTO_Policy {
        const json = this.toJSON();
        let result = new PageDTO_Policy();
        result.init(json);
        return result;
    }
}

export interface IPageDTO_Policy {
    count?: number | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
    resultSet?: Policy[] | undefined;

    [key: string]: any;
}

export class PageDTO_UserPermission implements IPageDTO_UserPermission {
    count?: number | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
    resultSet?: UserPermission[] | undefined;

    [key: string]: any;

    constructor(data?: IPageDTO_UserPermission) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.count = _data["count"];
            this.limit = _data["limit"];
            this.offset = _data["offset"];
            if (Array.isArray(_data["resultSet"])) {
                this.resultSet = [] as any;
                for (let item of _data["resultSet"])
                    this.resultSet!.push(UserPermission.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageDTO_UserPermission {
        data = typeof data === 'object' ? data : {};
        let result = new PageDTO_UserPermission();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["count"] = this.count;
        data["limit"] = this.limit;
        data["offset"] = this.offset;
        if (Array.isArray(this.resultSet)) {
            data["resultSet"] = [];
            for (let item of this.resultSet)
                data["resultSet"].push(item.toJSON());
        }
        return data;
    }

    clone(): PageDTO_UserPermission {
        const json = this.toJSON();
        let result = new PageDTO_UserPermission();
        result.init(json);
        return result;
    }
}

export interface IPageDTO_UserPermission {
    count?: number | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
    resultSet?: UserPermission[] | undefined;

    [key: string]: any;
}

export class PageDTO_User implements IPageDTO_User {
    count?: number | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
    resultSet?: User[] | undefined;

    [key: string]: any;

    constructor(data?: IPageDTO_User) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.count = _data["count"];
            this.limit = _data["limit"];
            this.offset = _data["offset"];
            if (Array.isArray(_data["resultSet"])) {
                this.resultSet = [] as any;
                for (let item of _data["resultSet"])
                    this.resultSet!.push(User.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageDTO_User {
        data = typeof data === 'object' ? data : {};
        let result = new PageDTO_User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["count"] = this.count;
        data["limit"] = this.limit;
        data["offset"] = this.offset;
        if (Array.isArray(this.resultSet)) {
            data["resultSet"] = [];
            for (let item of this.resultSet)
                data["resultSet"].push(item.toJSON());
        }
        return data;
    }

    clone(): PageDTO_User {
        const json = this.toJSON();
        let result = new PageDTO_User();
        result.init(json);
        return result;
    }
}

export interface IPageDTO_User {
    count?: number | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
    resultSet?: User[] | undefined;

    [key: string]: any;
}

export class PermissionRequest implements IPermissionRequest {
    mask?: PermissionRequestMask | undefined;
    policyId?: string | undefined;

    [key: string]: any;

    constructor(data?: IPermissionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.mask = _data["mask"];
            this.policyId = _data["policyId"];
        }
    }

    static fromJS(data: any): PermissionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PermissionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["mask"] = this.mask;
        data["policyId"] = this.policyId;
        return data;
    }

    clone(): PermissionRequest {
        const json = this.toJSON();
        let result = new PermissionRequest();
        result.init(json);
        return result;
    }
}

export interface IPermissionRequest {
    mask?: PermissionRequestMask | undefined;
    policyId?: string | undefined;

    [key: string]: any;
}

export class Policy implements IPolicy {
    id?: string | undefined;
    name?: string | undefined;

    [key: string]: any;

    constructor(data?: IPolicy) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Policy {
        data = typeof data === 'object' ? data : {};
        let result = new Policy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }

    clone(): Policy {
        const json = this.toJSON();
        let result = new Policy();
        result.init(json);
        return result;
    }
}

export interface IPolicy {
    id?: string | undefined;
    name?: string | undefined;

    [key: string]: any;
}

export class PolicyRequest implements IPolicyRequest {
    name?: string | undefined;

    [key: string]: any;

    constructor(data?: IPolicyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): PolicyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PolicyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        return data;
    }

    clone(): PolicyRequest {
        const json = this.toJSON();
        let result = new PolicyRequest();
        result.init(json);
        return result;
    }
}

export interface IPolicyRequest {
    name?: string | undefined;

    [key: string]: any;
}

export class PolicyResponse implements IPolicyResponse {
    id?: string | undefined;
    mask?: PolicyResponseMask | undefined;
    name?: string | undefined;

    [key: string]: any;

    constructor(data?: IPolicyResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.id = _data["id"];
            this.mask = _data["mask"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): PolicyResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PolicyResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["id"] = this.id;
        data["mask"] = this.mask;
        data["name"] = this.name;
        return data;
    }

    clone(): PolicyResponse {
        const json = this.toJSON();
        let result = new PolicyResponse();
        result.init(json);
        return result;
    }
}

export interface IPolicyResponse {
    id?: string | undefined;
    mask?: PolicyResponseMask | undefined;
    name?: string | undefined;

    [key: string]: any;
}

export class ResolvedPermissionResponse implements IResolvedPermissionResponse {
    accessLevel?: ResolvedPermissionResponseAccessLevel | undefined;
    id?: string | undefined;
    owner?: Identifiable | undefined;
    ownerType?: string | undefined;
    policy?: Policy | undefined;

    [key: string]: any;

    constructor(data?: IResolvedPermissionResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.accessLevel = _data["accessLevel"];
            this.id = _data["id"];
            this.owner = _data["owner"] ? Identifiable.fromJS(_data["owner"]) : <any>undefined;
            this.ownerType = _data["ownerType"];
            this.policy = _data["policy"] ? Policy.fromJS(_data["policy"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ResolvedPermissionResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ResolvedPermissionResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["accessLevel"] = this.accessLevel;
        data["id"] = this.id;
        data["owner"] = this.owner ? this.owner.toJSON() : <any>undefined;
        data["ownerType"] = this.ownerType;
        data["policy"] = this.policy ? this.policy.toJSON() : <any>undefined;
        return data;
    }

    clone(): ResolvedPermissionResponse {
        const json = this.toJSON();
        let result = new ResolvedPermissionResponse();
        result.init(json);
        return result;
    }
}

export interface IResolvedPermissionResponse {
    accessLevel?: ResolvedPermissionResponseAccessLevel | undefined;
    id?: string | undefined;
    owner?: Identifiable | undefined;
    ownerType?: string | undefined;
    policy?: Policy | undefined;

    [key: string]: any;
}

export class TokenResponse implements ITokenResponse {
    accessToken?: string | undefined;
    description?: string | undefined;
    exp?: number | undefined;
    scope?: string[] | undefined;

    [key: string]: any;

    constructor(data?: ITokenResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.accessToken = _data["accessToken"];
            this.description = _data["description"];
            this.exp = _data["exp"];
            if (Array.isArray(_data["scope"])) {
                this.scope = [] as any;
                for (let item of _data["scope"])
                    this.scope!.push(item);
            }
        }
    }

    static fromJS(data: any): TokenResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TokenResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["accessToken"] = this.accessToken;
        data["description"] = this.description;
        data["exp"] = this.exp;
        if (Array.isArray(this.scope)) {
            data["scope"] = [];
            for (let item of this.scope)
                data["scope"].push(item);
        }
        return data;
    }

    clone(): TokenResponse {
        const json = this.toJSON();
        let result = new TokenResponse();
        result.init(json);
        return result;
    }
}

export interface ITokenResponse {
    accessToken?: string | undefined;
    description?: string | undefined;
    exp?: number | undefined;
    scope?: string[] | undefined;

    [key: string]: any;
}

export class TransactionalDeleteRequest implements ITransactionalDeleteRequest {
    groupNames?: string[] | undefined;
    policyNames?: string[] | undefined;

    [key: string]: any;

    constructor(data?: ITransactionalDeleteRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["groupNames"])) {
                this.groupNames = [] as any;
                for (let item of _data["groupNames"])
                    this.groupNames!.push(item);
            }
            if (Array.isArray(_data["policyNames"])) {
                this.policyNames = [] as any;
                for (let item of _data["policyNames"])
                    this.policyNames!.push(item);
            }
        }
    }

    static fromJS(data: any): TransactionalDeleteRequest {
        data = typeof data === 'object' ? data : {};
        let result = new TransactionalDeleteRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.groupNames)) {
            data["groupNames"] = [];
            for (let item of this.groupNames)
                data["groupNames"].push(item);
        }
        if (Array.isArray(this.policyNames)) {
            data["policyNames"] = [];
            for (let item of this.policyNames)
                data["policyNames"].push(item);
        }
        return data;
    }

    clone(): TransactionalDeleteRequest {
        const json = this.toJSON();
        let result = new TransactionalDeleteRequest();
        result.init(json);
        return result;
    }
}

export interface ITransactionalDeleteRequest {
    groupNames?: string[] | undefined;
    policyNames?: string[] | undefined;

    [key: string]: any;
}

export class TransactionalGroupPermissionRequest implements ITransactionalGroupPermissionRequest {
    groupName?: string | undefined;
    mask?: TransactionalGroupPermissionRequestMask | undefined;
    policyName?: string | undefined;

    [key: string]: any;

    constructor(data?: ITransactionalGroupPermissionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.groupName = _data["groupName"];
            this.mask = _data["mask"];
            this.policyName = _data["policyName"];
        }
    }

    static fromJS(data: any): TransactionalGroupPermissionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new TransactionalGroupPermissionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["groupName"] = this.groupName;
        data["mask"] = this.mask;
        data["policyName"] = this.policyName;
        return data;
    }

    clone(): TransactionalGroupPermissionRequest {
        const json = this.toJSON();
        let result = new TransactionalGroupPermissionRequest();
        result.init(json);
        return result;
    }
}

export interface ITransactionalGroupPermissionRequest {
    groupName?: string | undefined;
    mask?: TransactionalGroupPermissionRequestMask | undefined;
    policyName?: string | undefined;

    [key: string]: any;
}

export class UpdateApplicationRequest implements IUpdateApplicationRequest {
    clientId?: string | undefined;
    clientSecret?: string | undefined;
    description?: string | undefined;
    errorRedirectUri?: string | undefined;
    name?: string | undefined;
    redirectUri?: string | undefined;
    status?: UpdateApplicationRequestStatus | undefined;
    type?: UpdateApplicationRequestType | undefined;

    [key: string]: any;

    constructor(data?: IUpdateApplicationRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.clientId = _data["clientId"];
            this.clientSecret = _data["clientSecret"];
            this.description = _data["description"];
            this.errorRedirectUri = _data["errorRedirectUri"];
            this.name = _data["name"];
            this.redirectUri = _data["redirectUri"];
            this.status = _data["status"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): UpdateApplicationRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateApplicationRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["clientId"] = this.clientId;
        data["clientSecret"] = this.clientSecret;
        data["description"] = this.description;
        data["errorRedirectUri"] = this.errorRedirectUri;
        data["name"] = this.name;
        data["redirectUri"] = this.redirectUri;
        data["status"] = this.status;
        data["type"] = this.type;
        return data;
    }

    clone(): UpdateApplicationRequest {
        const json = this.toJSON();
        let result = new UpdateApplicationRequest();
        result.init(json);
        return result;
    }
}

export interface IUpdateApplicationRequest {
    clientId?: string | undefined;
    clientSecret?: string | undefined;
    description?: string | undefined;
    errorRedirectUri?: string | undefined;
    name?: string | undefined;
    redirectUri?: string | undefined;
    status?: UpdateApplicationRequestStatus | undefined;
    type?: UpdateApplicationRequestType | undefined;

    [key: string]: any;
}

export class UpdateUserRequest implements IUpdateUserRequest {
    firstName?: string | undefined;
    lastName?: string | undefined;
    preferredLanguage?: UpdateUserRequestPreferredLanguage | undefined;
    status?: UpdateUserRequestStatus | undefined;
    type?: UpdateUserRequestType | undefined;

    [key: string]: any;

    constructor(data?: IUpdateUserRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.preferredLanguage = _data["preferredLanguage"];
            this.status = _data["status"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): UpdateUserRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["preferredLanguage"] = this.preferredLanguage;
        data["status"] = this.status;
        data["type"] = this.type;
        return data;
    }

    clone(): UpdateUserRequest {
        const json = this.toJSON();
        let result = new UpdateUserRequest();
        result.init(json);
        return result;
    }
}

export interface IUpdateUserRequest {
    firstName?: string | undefined;
    lastName?: string | undefined;
    preferredLanguage?: UpdateUserRequestPreferredLanguage | undefined;
    status?: UpdateUserRequestStatus | undefined;
    type?: UpdateUserRequestType | undefined;

    [key: string]: any;
}

export class User implements IUser {
    createdAt?: Date | undefined;
    email?: string | undefined;
    firstName?: string | undefined;
    groups?: string[] | undefined;
    id?: string | undefined;
    lastLogin?: Date | undefined;
    lastName?: string | undefined;
    preferredLanguage?: UserPreferredLanguage | undefined;
    providerSubjectId?: string | undefined;
    providerType?: UserProviderType | undefined;
    status?: UserStatus | undefined;
    type?: UserType | undefined;

    [key: string]: any;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.email = _data["email"];
            this.firstName = _data["firstName"];
            if (Array.isArray(_data["groups"])) {
                this.groups = [] as any;
                for (let item of _data["groups"])
                    this.groups!.push(item);
            }
            this.id = _data["id"];
            this.lastLogin = _data["lastLogin"] ? new Date(_data["lastLogin"].toString()) : <any>undefined;
            this.lastName = _data["lastName"];
            this.preferredLanguage = _data["preferredLanguage"];
            this.providerSubjectId = _data["providerSubjectId"];
            this.providerType = _data["providerType"];
            this.status = _data["status"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["email"] = this.email;
        data["firstName"] = this.firstName;
        if (Array.isArray(this.groups)) {
            data["groups"] = [];
            for (let item of this.groups)
                data["groups"].push(item);
        }
        data["id"] = this.id;
        data["lastLogin"] = this.lastLogin ? this.lastLogin.toISOString() : <any>undefined;
        data["lastName"] = this.lastName;
        data["preferredLanguage"] = this.preferredLanguage;
        data["providerSubjectId"] = this.providerSubjectId;
        data["providerType"] = this.providerType;
        data["status"] = this.status;
        data["type"] = this.type;
        return data;
    }

    clone(): User {
        const json = this.toJSON();
        let result = new User();
        result.init(json);
        return result;
    }
}

export interface IUser {
    createdAt?: Date | undefined;
    email?: string | undefined;
    firstName?: string | undefined;
    groups?: string[] | undefined;
    id?: string | undefined;
    lastLogin?: Date | undefined;
    lastName?: string | undefined;
    preferredLanguage?: UserPreferredLanguage | undefined;
    providerSubjectId?: string | undefined;
    providerType?: UserProviderType | undefined;
    status?: UserStatus | undefined;
    type?: UserType | undefined;

    [key: string]: any;
}

export class UserPermission implements IUserPermission {
    accessLevel?: UserPermissionAccessLevel | undefined;
    id?: string | undefined;
    owner?: User | undefined;
    policy?: Policy | undefined;

    [key: string]: any;

    constructor(data?: IUserPermission) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.accessLevel = _data["accessLevel"];
            this.id = _data["id"];
            this.owner = _data["owner"] ? User.fromJS(_data["owner"]) : <any>undefined;
            this.policy = _data["policy"] ? Policy.fromJS(_data["policy"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserPermission {
        data = typeof data === 'object' ? data : {};
        let result = new UserPermission();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["accessLevel"] = this.accessLevel;
        data["id"] = this.id;
        data["owner"] = this.owner ? this.owner.toJSON() : <any>undefined;
        data["policy"] = this.policy ? this.policy.toJSON() : <any>undefined;
        return data;
    }

    clone(): UserPermission {
        const json = this.toJSON();
        let result = new UserPermission();
        result.init(json);
        return result;
    }
}

export interface IUserPermission {
    accessLevel?: UserPermissionAccessLevel | undefined;
    id?: string | undefined;
    owner?: User | undefined;
    policy?: Policy | undefined;

    [key: string]: any;
}

export class UserScopesResponse implements IUserScopesResponse {
    scopes?: string[] | undefined;

    [key: string]: any;

    constructor(data?: IUserScopesResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["scopes"])) {
                this.scopes = [] as any;
                for (let item of _data["scopes"])
                    this.scopes!.push(item);
            }
        }
    }

    static fromJS(data: any): UserScopesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserScopesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.scopes)) {
            data["scopes"] = [];
            for (let item of this.scopes)
                data["scopes"].push(item);
        }
        return data;
    }

    clone(): UserScopesResponse {
        const json = this.toJSON();
        let result = new UserScopesResponse();
        result.init(json);
        return result;
    }
}

export interface IUserScopesResponse {
    scopes?: string[] | undefined;

    [key: string]: any;
}

export class Anonymous implements IAnonymous {

    [key: string]: any;

    constructor(data?: IAnonymous) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Anonymous {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }

    clone(): Anonymous {
        const json = this.toJSON();
        let result = new Anonymous();
        result.init(json);
        return result;
    }
}

export interface IAnonymous {

    [key: string]: any;
}

export enum ApplicationStatus {
    APPROVED = "APPROVED",
    DISABLED = "DISABLED",
    PENDING = "PENDING",
    REJECTED = "REJECTED",
}

export enum ApplicationType {
    CLIENT = "CLIENT",
    ADMIN = "ADMIN",
}

export enum ApplicationPermissionAccessLevel {
    READ = "READ",
    WRITE = "WRITE",
    DENY = "DENY",
}

export enum CreateApplicationRequestStatus {
    APPROVED = "APPROVED",
    DISABLED = "DISABLED",
    PENDING = "PENDING",
    REJECTED = "REJECTED",
}

export enum CreateApplicationRequestType {
    CLIENT = "CLIENT",
    ADMIN = "ADMIN",
}

export enum GroupStatus {
    APPROVED = "APPROVED",
    DISABLED = "DISABLED",
    PENDING = "PENDING",
    REJECTED = "REJECTED",
}

export enum GroupPermissionAccessLevel {
    READ = "READ",
    WRITE = "WRITE",
    DENY = "DENY",
}

export enum GroupRequestStatus {
    APPROVED = "APPROVED",
    DISABLED = "DISABLED",
    PENDING = "PENDING",
    REJECTED = "REJECTED",
}

export enum MaskDTOMask {
    READ = "READ",
    WRITE = "WRITE",
    DENY = "DENY",
}

export enum PermissionRequestMask {
    READ = "READ",
    WRITE = "WRITE",
    DENY = "DENY",
}

export enum PolicyResponseMask {
    READ = "READ",
    WRITE = "WRITE",
    DENY = "DENY",
}

export enum ResolvedPermissionResponseAccessLevel {
    READ = "READ",
    WRITE = "WRITE",
    DENY = "DENY",
}

export enum TransactionalGroupPermissionRequestMask {
    READ = "READ",
    WRITE = "WRITE",
    DENY = "DENY",
}

export enum UpdateApplicationRequestStatus {
    APPROVED = "APPROVED",
    DISABLED = "DISABLED",
    PENDING = "PENDING",
    REJECTED = "REJECTED",
}

export enum UpdateApplicationRequestType {
    CLIENT = "CLIENT",
    ADMIN = "ADMIN",
}

export enum UpdateUserRequestPreferredLanguage {
    ENGLISH = "ENGLISH",
    FRENCH = "FRENCH",
    SPANISH = "SPANISH",
}

export enum UpdateUserRequestStatus {
    APPROVED = "APPROVED",
    DISABLED = "DISABLED",
    PENDING = "PENDING",
    REJECTED = "REJECTED",
}

export enum UpdateUserRequestType {
    USER = "USER",
    ADMIN = "ADMIN",
}

export enum UserPreferredLanguage {
    ENGLISH = "ENGLISH",
    FRENCH = "FRENCH",
    SPANISH = "SPANISH",
}

export enum UserProviderType {
    GOOGLE = "GOOGLE",
    FACEBOOK = "FACEBOOK",
    LINKEDIN = "LINKEDIN",
    GITHUB = "GITHUB",
    ORCID = "ORCID",
    KEYCLOAK = "KEYCLOAK",
}

export enum UserStatus {
    APPROVED = "APPROVED",
    DISABLED = "DISABLED",
    PENDING = "PENDING",
    REJECTED = "REJECTED",
}

export enum UserType {
    USER = "USER",
    ADMIN = "ADMIN",
}

export enum UserPermissionAccessLevel {
    READ = "READ",
    WRITE = "WRITE",
    DENY = "DENY",
}

