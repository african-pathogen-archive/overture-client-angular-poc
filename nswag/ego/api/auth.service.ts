/**
 * Ego Service API
 * Ego API Documentation
 *
 * The version of the OpenAPI document: 4.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { OAuth2AccessToken } from '../model/oAuth2AccessToken';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class AuthService {

    protected basePath = 'http://dms.thakhutse.co.za:443/ego-api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * deleteRefreshToken
     * @param refreshId refreshId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteRefreshTokenUsingDELETE(refreshId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<string>;
    public deleteRefreshTokenUsingDELETE(refreshId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public deleteRefreshTokenUsingDELETE(refreshId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public deleteRefreshTokenUsingDELETE(refreshId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Bearer) required
        localVarCredential = this.configuration.lookupCredential('Bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.delete<string>(`${this.configuration.basePath}/oauth/refresh`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * exchangeFacebookTokenForAuth
     * @param token token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exchangeFacebookTokenForAuthUsingGET(token: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<string>;
    public exchangeFacebookTokenForAuthUsingGET(token: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public exchangeFacebookTokenForAuthUsingGET(token: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public exchangeFacebookTokenForAuthUsingGET(token: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling exchangeFacebookTokenForAuthUsingGET.');
        }

        let localVarHeaders = this.defaultHeaders;
        if (token !== undefined && token !== null) {
            localVarHeaders = localVarHeaders.set('token', String(token));
        }

        let localVarCredential: string | undefined;
        // authentication (Bearer) required
        localVarCredential = this.configuration.lookupCredential('Bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<string>(`${this.configuration.basePath}/oauth/facebook/token`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * exchangeGoogleTokenForAuth
     * @param token token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exchangeGoogleTokenForAuthUsingGET(token: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<string>;
    public exchangeGoogleTokenForAuthUsingGET(token: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public exchangeGoogleTokenForAuthUsingGET(token: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public exchangeGoogleTokenForAuthUsingGET(token: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling exchangeGoogleTokenForAuthUsingGET.');
        }

        let localVarHeaders = this.defaultHeaders;
        if (token !== undefined && token !== null) {
            localVarHeaders = localVarHeaders.set('token', String(token));
        }

        let localVarCredential: string | undefined;
        // authentication (Bearer) required
        localVarCredential = this.configuration.lookupCredential('Bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<string>(`${this.configuration.basePath}/oauth/google/token`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPublicKey
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPublicKeyUsingGET(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain', context?: HttpContext}): Observable<string>;
    public getPublicKeyUsingGET(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain', context?: HttpContext}): Observable<HttpResponse<string>>;
    public getPublicKeyUsingGET(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain', context?: HttpContext}): Observable<HttpEvent<string>>;
    public getPublicKeyUsingGET(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain', context?: HttpContext}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Bearer) required
        localVarCredential = this.configuration.lookupCredential('Bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<string>(`${this.configuration.basePath}/oauth/token/public_key`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * postAccessToken
     * @param clientId 
     * @param clientSecret 
     * @param grantType 
     * @param name 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postAccessTokenUsingPOST(clientId: string, clientSecret: string, grantType: string, name?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<OAuth2AccessToken>;
    public postAccessTokenUsingPOST(clientId: string, clientSecret: string, grantType: string, name?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<OAuth2AccessToken>>;
    public postAccessTokenUsingPOST(clientId: string, clientSecret: string, grantType: string, name?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<OAuth2AccessToken>>;
    public postAccessTokenUsingPOST(clientId: string, clientSecret: string, grantType: string, name?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (clientId === null || clientId === undefined) {
            throw new Error('Required parameter clientId was null or undefined when calling postAccessTokenUsingPOST.');
        }
        if (clientSecret === null || clientSecret === undefined) {
            throw new Error('Required parameter clientSecret was null or undefined when calling postAccessTokenUsingPOST.');
        }
        if (grantType === null || grantType === undefined) {
            throw new Error('Required parameter grantType was null or undefined when calling postAccessTokenUsingPOST.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (clientId !== undefined && clientId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clientId, 'client_id');
        }
        if (clientSecret !== undefined && clientSecret !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clientSecret, 'client_secret');
        }
        if (grantType !== undefined && grantType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>grantType, 'grant_type');
        }
        if (name !== undefined && name !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>name, 'name');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Bearer) required
        localVarCredential = this.configuration.lookupCredential('Bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.post<OAuth2AccessToken>(`${this.configuration.basePath}/oauth/token`,
            null,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * refreshEgoToken
     * @param refreshId refreshId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public refreshEgoTokenUsingPOST(refreshId?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<string>;
    public refreshEgoTokenUsingPOST(refreshId?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public refreshEgoTokenUsingPOST(refreshId?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public refreshEgoTokenUsingPOST(refreshId?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Bearer) required
        localVarCredential = this.configuration.lookupCredential('Bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.post<string>(`${this.configuration.basePath}/oauth/refresh`,
            refreshId,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateEgoToken
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateEgoTokenUsingGET(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<string>;
    public updateEgoTokenUsingGET(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public updateEgoTokenUsingGET(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public updateEgoTokenUsingGET(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Bearer) required
        localVarCredential = this.configuration.lookupCredential('Bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<string>(`${this.configuration.basePath}/oauth/update-ego-token`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateEgoToken
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateEgoTokenUsingPOST(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<string>;
    public updateEgoTokenUsingPOST(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public updateEgoTokenUsingPOST(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public updateEgoTokenUsingPOST(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Bearer) required
        localVarCredential = this.configuration.lookupCredential('Bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.post<string>(`${this.configuration.basePath}/oauth/update-ego-token`,
            null,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * user
     * @param oAuth2RequestApproved 
     * @param oAuth2RequestAuthorities0Authority 
     * @param oAuth2RequestGrantType 
     * @param oAuth2RequestRedirectUri 
     * @param oAuth2RequestRefresh 
     * @param oAuth2RequestRefreshTokenRequestGrantType 
     * @param oAuth2RequestResourceIds 
     * @param oAuth2RequestResponseTypes 
     * @param authenticated 
     * @param authorities0Authority 
     * @param clientOnly 
     * @param credentials 
     * @param details 
     * @param name 
     * @param principal 
     * @param userAuthenticationAuthenticated 
     * @param userAuthenticationAuthorities0Authority 
     * @param userAuthenticationCredentials 
     * @param userAuthenticationDetails 
     * @param userAuthenticationPrincipal 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userUsingGET(oAuth2RequestApproved?: boolean, oAuth2RequestAuthorities0Authority?: string, oAuth2RequestGrantType?: string, oAuth2RequestRedirectUri?: string, oAuth2RequestRefresh?: boolean, oAuth2RequestRefreshTokenRequestGrantType?: string, oAuth2RequestResourceIds?: Array<string>, oAuth2RequestResponseTypes?: Array<string>, authenticated?: boolean, authorities0Authority?: string, clientOnly?: boolean, credentials?: object, details?: object, name?: string, principal?: object, userAuthenticationAuthenticated?: boolean, userAuthenticationAuthorities0Authority?: string, userAuthenticationCredentials?: object, userAuthenticationDetails?: object, userAuthenticationPrincipal?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<string>;
    public userUsingGET(oAuth2RequestApproved?: boolean, oAuth2RequestAuthorities0Authority?: string, oAuth2RequestGrantType?: string, oAuth2RequestRedirectUri?: string, oAuth2RequestRefresh?: boolean, oAuth2RequestRefreshTokenRequestGrantType?: string, oAuth2RequestResourceIds?: Array<string>, oAuth2RequestResponseTypes?: Array<string>, authenticated?: boolean, authorities0Authority?: string, clientOnly?: boolean, credentials?: object, details?: object, name?: string, principal?: object, userAuthenticationAuthenticated?: boolean, userAuthenticationAuthorities0Authority?: string, userAuthenticationCredentials?: object, userAuthenticationDetails?: object, userAuthenticationPrincipal?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public userUsingGET(oAuth2RequestApproved?: boolean, oAuth2RequestAuthorities0Authority?: string, oAuth2RequestGrantType?: string, oAuth2RequestRedirectUri?: string, oAuth2RequestRefresh?: boolean, oAuth2RequestRefreshTokenRequestGrantType?: string, oAuth2RequestResourceIds?: Array<string>, oAuth2RequestResponseTypes?: Array<string>, authenticated?: boolean, authorities0Authority?: string, clientOnly?: boolean, credentials?: object, details?: object, name?: string, principal?: object, userAuthenticationAuthenticated?: boolean, userAuthenticationAuthorities0Authority?: string, userAuthenticationCredentials?: object, userAuthenticationDetails?: object, userAuthenticationPrincipal?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public userUsingGET(oAuth2RequestApproved?: boolean, oAuth2RequestAuthorities0Authority?: string, oAuth2RequestGrantType?: string, oAuth2RequestRedirectUri?: string, oAuth2RequestRefresh?: boolean, oAuth2RequestRefreshTokenRequestGrantType?: string, oAuth2RequestResourceIds?: Array<string>, oAuth2RequestResponseTypes?: Array<string>, authenticated?: boolean, authorities0Authority?: string, clientOnly?: boolean, credentials?: object, details?: object, name?: string, principal?: object, userAuthenticationAuthenticated?: boolean, userAuthenticationAuthorities0Authority?: string, userAuthenticationCredentials?: object, userAuthenticationDetails?: object, userAuthenticationPrincipal?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (oAuth2RequestApproved !== undefined && oAuth2RequestApproved !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>oAuth2RequestApproved, 'OAuth2Request.approved');
        }
        if (oAuth2RequestAuthorities0Authority !== undefined && oAuth2RequestAuthorities0Authority !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>oAuth2RequestAuthorities0Authority, 'OAuth2Request.authorities[0].authority');
        }
        if (oAuth2RequestGrantType !== undefined && oAuth2RequestGrantType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>oAuth2RequestGrantType, 'OAuth2Request.grantType');
        }
        if (oAuth2RequestRedirectUri !== undefined && oAuth2RequestRedirectUri !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>oAuth2RequestRedirectUri, 'OAuth2Request.redirectUri');
        }
        if (oAuth2RequestRefresh !== undefined && oAuth2RequestRefresh !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>oAuth2RequestRefresh, 'OAuth2Request.refresh');
        }
        if (oAuth2RequestRefreshTokenRequestGrantType !== undefined && oAuth2RequestRefreshTokenRequestGrantType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>oAuth2RequestRefreshTokenRequestGrantType, 'OAuth2Request.refreshTokenRequest.grantType');
        }
        if (oAuth2RequestResourceIds) {
            oAuth2RequestResourceIds.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'OAuth2Request.resourceIds');
            })
        }
        if (oAuth2RequestResponseTypes) {
            oAuth2RequestResponseTypes.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'OAuth2Request.responseTypes');
            })
        }
        if (authenticated !== undefined && authenticated !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>authenticated, 'authenticated');
        }
        if (authorities0Authority !== undefined && authorities0Authority !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>authorities0Authority, 'authorities[0].authority');
        }
        if (clientOnly !== undefined && clientOnly !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clientOnly, 'clientOnly');
        }
        if (credentials !== undefined && credentials !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>credentials, 'credentials');
        }
        if (details !== undefined && details !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>details, 'details');
        }
        if (name !== undefined && name !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>name, 'name');
        }
        if (principal !== undefined && principal !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>principal, 'principal');
        }
        if (userAuthenticationAuthenticated !== undefined && userAuthenticationAuthenticated !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>userAuthenticationAuthenticated, 'userAuthentication.authenticated');
        }
        if (userAuthenticationAuthorities0Authority !== undefined && userAuthenticationAuthorities0Authority !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>userAuthenticationAuthorities0Authority, 'userAuthentication.authorities[0].authority');
        }
        if (userAuthenticationCredentials !== undefined && userAuthenticationCredentials !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>userAuthenticationCredentials, 'userAuthentication.credentials');
        }
        if (userAuthenticationDetails !== undefined && userAuthenticationDetails !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>userAuthenticationDetails, 'userAuthentication.details');
        }
        if (userAuthenticationPrincipal !== undefined && userAuthenticationPrincipal !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>userAuthenticationPrincipal, 'userAuthentication.principal');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Bearer) required
        localVarCredential = this.configuration.lookupCredential('Bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<string>(`${this.configuration.basePath}/oauth/ego-token`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * user
     * @param oAuth2RequestApproved 
     * @param oAuth2RequestAuthorities0Authority 
     * @param oAuth2RequestGrantType 
     * @param oAuth2RequestRedirectUri 
     * @param oAuth2RequestRefresh 
     * @param oAuth2RequestRefreshTokenRequestGrantType 
     * @param oAuth2RequestResourceIds 
     * @param oAuth2RequestResponseTypes 
     * @param authenticated 
     * @param authorities0Authority 
     * @param clientOnly 
     * @param credentials 
     * @param details 
     * @param name 
     * @param principal 
     * @param userAuthenticationAuthenticated 
     * @param userAuthenticationAuthorities0Authority 
     * @param userAuthenticationCredentials 
     * @param userAuthenticationDetails 
     * @param userAuthenticationPrincipal 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userUsingPOST(oAuth2RequestApproved?: boolean, oAuth2RequestAuthorities0Authority?: string, oAuth2RequestGrantType?: string, oAuth2RequestRedirectUri?: string, oAuth2RequestRefresh?: boolean, oAuth2RequestRefreshTokenRequestGrantType?: string, oAuth2RequestResourceIds?: Array<string>, oAuth2RequestResponseTypes?: Array<string>, authenticated?: boolean, authorities0Authority?: string, clientOnly?: boolean, credentials?: object, details?: object, name?: string, principal?: object, userAuthenticationAuthenticated?: boolean, userAuthenticationAuthorities0Authority?: string, userAuthenticationCredentials?: object, userAuthenticationDetails?: object, userAuthenticationPrincipal?: object, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<string>;
    public userUsingPOST(oAuth2RequestApproved?: boolean, oAuth2RequestAuthorities0Authority?: string, oAuth2RequestGrantType?: string, oAuth2RequestRedirectUri?: string, oAuth2RequestRefresh?: boolean, oAuth2RequestRefreshTokenRequestGrantType?: string, oAuth2RequestResourceIds?: Array<string>, oAuth2RequestResponseTypes?: Array<string>, authenticated?: boolean, authorities0Authority?: string, clientOnly?: boolean, credentials?: object, details?: object, name?: string, principal?: object, userAuthenticationAuthenticated?: boolean, userAuthenticationAuthorities0Authority?: string, userAuthenticationCredentials?: object, userAuthenticationDetails?: object, userAuthenticationPrincipal?: object, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<string>>;
    public userUsingPOST(oAuth2RequestApproved?: boolean, oAuth2RequestAuthorities0Authority?: string, oAuth2RequestGrantType?: string, oAuth2RequestRedirectUri?: string, oAuth2RequestRefresh?: boolean, oAuth2RequestRefreshTokenRequestGrantType?: string, oAuth2RequestResourceIds?: Array<string>, oAuth2RequestResponseTypes?: Array<string>, authenticated?: boolean, authorities0Authority?: string, clientOnly?: boolean, credentials?: object, details?: object, name?: string, principal?: object, userAuthenticationAuthenticated?: boolean, userAuthenticationAuthorities0Authority?: string, userAuthenticationCredentials?: object, userAuthenticationDetails?: object, userAuthenticationPrincipal?: object, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<string>>;
    public userUsingPOST(oAuth2RequestApproved?: boolean, oAuth2RequestAuthorities0Authority?: string, oAuth2RequestGrantType?: string, oAuth2RequestRedirectUri?: string, oAuth2RequestRefresh?: boolean, oAuth2RequestRefreshTokenRequestGrantType?: string, oAuth2RequestResourceIds?: Array<string>, oAuth2RequestResponseTypes?: Array<string>, authenticated?: boolean, authorities0Authority?: string, clientOnly?: boolean, credentials?: object, details?: object, name?: string, principal?: object, userAuthenticationAuthenticated?: boolean, userAuthenticationAuthorities0Authority?: string, userAuthenticationCredentials?: object, userAuthenticationDetails?: object, userAuthenticationPrincipal?: object, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (oAuth2RequestApproved !== undefined && oAuth2RequestApproved !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>oAuth2RequestApproved, 'OAuth2Request.approved');
        }
        if (oAuth2RequestAuthorities0Authority !== undefined && oAuth2RequestAuthorities0Authority !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>oAuth2RequestAuthorities0Authority, 'OAuth2Request.authorities[0].authority');
        }
        if (oAuth2RequestGrantType !== undefined && oAuth2RequestGrantType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>oAuth2RequestGrantType, 'OAuth2Request.grantType');
        }
        if (oAuth2RequestRedirectUri !== undefined && oAuth2RequestRedirectUri !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>oAuth2RequestRedirectUri, 'OAuth2Request.redirectUri');
        }
        if (oAuth2RequestRefresh !== undefined && oAuth2RequestRefresh !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>oAuth2RequestRefresh, 'OAuth2Request.refresh');
        }
        if (oAuth2RequestRefreshTokenRequestGrantType !== undefined && oAuth2RequestRefreshTokenRequestGrantType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>oAuth2RequestRefreshTokenRequestGrantType, 'OAuth2Request.refreshTokenRequest.grantType');
        }
        if (oAuth2RequestResourceIds) {
            oAuth2RequestResourceIds.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'OAuth2Request.resourceIds');
            })
        }
        if (oAuth2RequestResponseTypes) {
            oAuth2RequestResponseTypes.forEach((element) => {
                localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                  <any>element, 'OAuth2Request.responseTypes');
            })
        }
        if (authenticated !== undefined && authenticated !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>authenticated, 'authenticated');
        }
        if (authorities0Authority !== undefined && authorities0Authority !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>authorities0Authority, 'authorities[0].authority');
        }
        if (clientOnly !== undefined && clientOnly !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>clientOnly, 'clientOnly');
        }
        if (credentials !== undefined && credentials !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>credentials, 'credentials');
        }
        if (details !== undefined && details !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>details, 'details');
        }
        if (name !== undefined && name !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>name, 'name');
        }
        if (principal !== undefined && principal !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>principal, 'principal');
        }
        if (userAuthenticationAuthenticated !== undefined && userAuthenticationAuthenticated !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>userAuthenticationAuthenticated, 'userAuthentication.authenticated');
        }
        if (userAuthenticationAuthorities0Authority !== undefined && userAuthenticationAuthorities0Authority !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>userAuthenticationAuthorities0Authority, 'userAuthentication.authorities[0].authority');
        }
        if (userAuthenticationCredentials !== undefined && userAuthenticationCredentials !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>userAuthenticationCredentials, 'userAuthentication.credentials');
        }
        if (userAuthenticationDetails !== undefined && userAuthenticationDetails !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>userAuthenticationDetails, 'userAuthentication.details');
        }
        if (userAuthenticationPrincipal !== undefined && userAuthenticationPrincipal !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>userAuthenticationPrincipal, 'userAuthentication.principal');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (Bearer) required
        localVarCredential = this.configuration.lookupCredential('Bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.post<string>(`${this.configuration.basePath}/oauth/ego-token`,
            null,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * verifyJWToken
     * @param token token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public verifyJWTokenUsingGET(token: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<boolean>;
    public verifyJWTokenUsingGET(token: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<boolean>>;
    public verifyJWTokenUsingGET(token: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<boolean>>;
    public verifyJWTokenUsingGET(token: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling verifyJWTokenUsingGET.');
        }

        let localVarHeaders = this.defaultHeaders;
        if (token !== undefined && token !== null) {
            localVarHeaders = localVarHeaders.set('token', String(token));
        }

        let localVarCredential: string | undefined;
        // authentication (Bearer) required
        localVarCredential = this.configuration.lookupCredential('Bearer');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<boolean>(`${this.configuration.basePath}/oauth/token/verify`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
