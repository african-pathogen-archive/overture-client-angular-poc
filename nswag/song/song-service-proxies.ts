//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export module SongServiceProxy {
export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');


export class Analysis implements IAnalysis {
    analysisId?: string | undefined;
    analysisState?: string | undefined;
    analysisStateHistory?: AnalysisStateChange[] | undefined;
    analysisType?: AnalysisTypeId | undefined;
    createdAt?: Date | undefined;
    files?: FileEntity[] | undefined;
    firstPublishedAt?: Date | undefined;
    publishedAt?: Date | undefined;
    samples?: CompositeEntity[] | undefined;
    studyId?: string | undefined;
    updatedAt?: Date | undefined;

    [key: string]: any;

    constructor(data?: IAnalysis) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.analysisId = _data["analysisId"];
            this.analysisState = _data["analysisState"];
            if (Array.isArray(_data["analysisStateHistory"])) {
                this.analysisStateHistory = [] as any;
                for (let item of _data["analysisStateHistory"])
                    this.analysisStateHistory!.push(AnalysisStateChange.fromJS(item));
            }
            this.analysisType = _data["analysisType"] ? AnalysisTypeId.fromJS(_data["analysisType"]) : <any>undefined;
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            if (Array.isArray(_data["files"])) {
                this.files = [] as any;
                for (let item of _data["files"])
                    this.files!.push(FileEntity.fromJS(item));
            }
            this.firstPublishedAt = _data["firstPublishedAt"] ? new Date(_data["firstPublishedAt"].toString()) : <any>undefined;
            this.publishedAt = _data["publishedAt"] ? new Date(_data["publishedAt"].toString()) : <any>undefined;
            if (Array.isArray(_data["samples"])) {
                this.samples = [] as any;
                for (let item of _data["samples"])
                    this.samples!.push(CompositeEntity.fromJS(item));
            }
            this.studyId = _data["studyId"];
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Analysis {
        data = typeof data === 'object' ? data : {};
        let result = new Analysis();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["analysisId"] = this.analysisId;
        data["analysisState"] = this.analysisState;
        if (Array.isArray(this.analysisStateHistory)) {
            data["analysisStateHistory"] = [];
            for (let item of this.analysisStateHistory)
                data["analysisStateHistory"].push(item.toJSON());
        }
        data["analysisType"] = this.analysisType ? this.analysisType.toJSON() : <any>undefined;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        if (Array.isArray(this.files)) {
            data["files"] = [];
            for (let item of this.files)
                data["files"].push(item.toJSON());
        }
        data["firstPublishedAt"] = this.firstPublishedAt ? this.firstPublishedAt.toISOString() : <any>undefined;
        data["publishedAt"] = this.publishedAt ? this.publishedAt.toISOString() : <any>undefined;
        if (Array.isArray(this.samples)) {
            data["samples"] = [];
            for (let item of this.samples)
                data["samples"].push(item.toJSON());
        }
        data["studyId"] = this.studyId;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IAnalysis {
    analysisId?: string | undefined;
    analysisState?: string | undefined;
    analysisStateHistory?: AnalysisStateChange[] | undefined;
    analysisType?: AnalysisTypeId | undefined;
    createdAt?: Date | undefined;
    files?: FileEntity[] | undefined;
    firstPublishedAt?: Date | undefined;
    publishedAt?: Date | undefined;
    samples?: CompositeEntity[] | undefined;
    studyId?: string | undefined;
    updatedAt?: Date | undefined;

    [key: string]: any;
}

export class AnalysisStateChange implements IAnalysisStateChange {
    initialState?: string | undefined;
    updatedAt?: Date | undefined;
    updatedState?: string | undefined;

    [key: string]: any;

    constructor(data?: IAnalysisStateChange) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.initialState = _data["initialState"];
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.updatedState = _data["updatedState"];
        }
    }

    static fromJS(data: any): AnalysisStateChange {
        data = typeof data === 'object' ? data : {};
        let result = new AnalysisStateChange();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["initialState"] = this.initialState;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["updatedState"] = this.updatedState;
        return data;
    }
}

export interface IAnalysisStateChange {
    initialState?: string | undefined;
    updatedAt?: Date | undefined;
    updatedState?: string | undefined;

    [key: string]: any;
}

export class AnalysisType implements IAnalysisType {
    createdAt?: Date | undefined;
    name?: string | undefined;
    schema?: JsonNode | undefined;
    version?: number | undefined;

    [key: string]: any;

    constructor(data?: IAnalysisType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.schema = _data["schema"] ? JsonNode.fromJS(_data["schema"]) : <any>undefined;
            this.version = _data["version"];
        }
    }

    static fromJS(data: any): AnalysisType {
        data = typeof data === 'object' ? data : {};
        let result = new AnalysisType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["schema"] = this.schema ? this.schema.toJSON() : <any>undefined;
        data["version"] = this.version;
        return data;
    }
}

export interface IAnalysisType {
    createdAt?: Date | undefined;
    name?: string | undefined;
    schema?: JsonNode | undefined;
    version?: number | undefined;

    [key: string]: any;
}

export class AnalysisTypeId implements IAnalysisTypeId {
    name?: string | undefined;
    version?: number | undefined;

    [key: string]: any;

    constructor(data?: IAnalysisTypeId) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.version = _data["version"];
        }
    }

    static fromJS(data: any): AnalysisTypeId {
        data = typeof data === 'object' ? data : {};
        let result = new AnalysisTypeId();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["version"] = this.version;
        return data;
    }
}

export interface IAnalysisTypeId {
    name?: string | undefined;
    version?: number | undefined;

    [key: string]: any;
}

export class CompositeEntity implements ICompositeEntity {
    donor?: Donor | undefined;
    info?: JsonNode | undefined;
    matchedNormalSubmitterSampleId?: string | undefined;
    sampleId?: string | undefined;
    sampleType?: string | undefined;
    specimen?: Specimen | undefined;
    specimenId?: string | undefined;
    submitterSampleId?: string | undefined;

    [key: string]: any;

    constructor(data?: ICompositeEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.donor = _data["donor"] ? Donor.fromJS(_data["donor"]) : <any>undefined;
            this.info = _data["info"] ? JsonNode.fromJS(_data["info"]) : <any>undefined;
            this.matchedNormalSubmitterSampleId = _data["matchedNormalSubmitterSampleId"];
            this.sampleId = _data["sampleId"];
            this.sampleType = _data["sampleType"];
            this.specimen = _data["specimen"] ? Specimen.fromJS(_data["specimen"]) : <any>undefined;
            this.specimenId = _data["specimenId"];
            this.submitterSampleId = _data["submitterSampleId"];
        }
    }

    static fromJS(data: any): CompositeEntity {
        data = typeof data === 'object' ? data : {};
        let result = new CompositeEntity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["donor"] = this.donor ? this.donor.toJSON() : <any>undefined;
        data["info"] = this.info ? this.info.toJSON() : <any>undefined;
        data["matchedNormalSubmitterSampleId"] = this.matchedNormalSubmitterSampleId;
        data["sampleId"] = this.sampleId;
        data["sampleType"] = this.sampleType;
        data["specimen"] = this.specimen ? this.specimen.toJSON() : <any>undefined;
        data["specimenId"] = this.specimenId;
        data["submitterSampleId"] = this.submitterSampleId;
        return data;
    }
}

export interface ICompositeEntity {
    donor?: Donor | undefined;
    info?: JsonNode | undefined;
    matchedNormalSubmitterSampleId?: string | undefined;
    sampleId?: string | undefined;
    sampleType?: string | undefined;
    specimen?: Specimen | undefined;
    specimenId?: string | undefined;
    submitterSampleId?: string | undefined;

    [key: string]: any;
}

export class Donor implements IDonor {
    donorId?: string | undefined;
    gender?: string | undefined;
    info?: JsonNode | undefined;
    studyId?: string | undefined;
    submitterDonorId?: string | undefined;

    [key: string]: any;

    constructor(data?: IDonor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.donorId = _data["donorId"];
            this.gender = _data["gender"];
            this.info = _data["info"] ? JsonNode.fromJS(_data["info"]) : <any>undefined;
            this.studyId = _data["studyId"];
            this.submitterDonorId = _data["submitterDonorId"];
        }
    }

    static fromJS(data: any): Donor {
        data = typeof data === 'object' ? data : {};
        let result = new Donor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["donorId"] = this.donorId;
        data["gender"] = this.gender;
        data["info"] = this.info ? this.info.toJSON() : <any>undefined;
        data["studyId"] = this.studyId;
        data["submitterDonorId"] = this.submitterDonorId;
        return data;
    }
}

export interface IDonor {
    donorId?: string | undefined;
    gender?: string | undefined;
    info?: JsonNode | undefined;
    studyId?: string | undefined;
    submitterDonorId?: string | undefined;

    [key: string]: any;
}

export class DonorWithSpecimens implements IDonorWithSpecimens {
    donorId?: string | undefined;
    gender?: string | undefined;
    info?: JsonNode | undefined;
    specimens?: SpecimenWithSamples[] | undefined;
    studyId?: string | undefined;
    submitterDonorId?: string | undefined;

    [key: string]: any;

    constructor(data?: IDonorWithSpecimens) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.donorId = _data["donorId"];
            this.gender = _data["gender"];
            this.info = _data["info"] ? JsonNode.fromJS(_data["info"]) : <any>undefined;
            if (Array.isArray(_data["specimens"])) {
                this.specimens = [] as any;
                for (let item of _data["specimens"])
                    this.specimens!.push(SpecimenWithSamples.fromJS(item));
            }
            this.studyId = _data["studyId"];
            this.submitterDonorId = _data["submitterDonorId"];
        }
    }

    static fromJS(data: any): DonorWithSpecimens {
        data = typeof data === 'object' ? data : {};
        let result = new DonorWithSpecimens();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["donorId"] = this.donorId;
        data["gender"] = this.gender;
        data["info"] = this.info ? this.info.toJSON() : <any>undefined;
        if (Array.isArray(this.specimens)) {
            data["specimens"] = [];
            for (let item of this.specimens)
                data["specimens"].push(item.toJSON());
        }
        data["studyId"] = this.studyId;
        data["submitterDonorId"] = this.submitterDonorId;
        return data;
    }
}

export interface IDonorWithSpecimens {
    donorId?: string | undefined;
    gender?: string | undefined;
    info?: JsonNode | undefined;
    specimens?: SpecimenWithSamples[] | undefined;
    studyId?: string | undefined;
    submitterDonorId?: string | undefined;

    [key: string]: any;
}

export class ExportedPayload implements IExportedPayload {
    payloads?: JsonNode[] | undefined;
    studyId?: string | undefined;

    [key: string]: any;

    constructor(data?: IExportedPayload) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["payloads"])) {
                this.payloads = [] as any;
                for (let item of _data["payloads"])
                    this.payloads!.push(JsonNode.fromJS(item));
            }
            this.studyId = _data["studyId"];
        }
    }

    static fromJS(data: any): ExportedPayload {
        data = typeof data === 'object' ? data : {};
        let result = new ExportedPayload();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.payloads)) {
            data["payloads"] = [];
            for (let item of this.payloads)
                data["payloads"].push(item.toJSON());
        }
        data["studyId"] = this.studyId;
        return data;
    }
}

export interface IExportedPayload {
    payloads?: JsonNode[] | undefined;
    studyId?: string | undefined;

    [key: string]: any;
}

export class FileDTO implements IFileDTO {
    analysisId?: string | undefined;
    dataType?: string | undefined;
    fileAccess?: string | undefined;
    fileMd5sum?: string | undefined;
    fileName?: string | undefined;
    fileSize?: number | undefined;
    fileType?: string | undefined;
    info?: JsonNode | undefined;
    objectId?: string | undefined;
    studyId?: string | undefined;

    [key: string]: any;

    constructor(data?: IFileDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.analysisId = _data["analysisId"];
            this.dataType = _data["dataType"];
            this.fileAccess = _data["fileAccess"];
            this.fileMd5sum = _data["fileMd5sum"];
            this.fileName = _data["fileName"];
            this.fileSize = _data["fileSize"];
            this.fileType = _data["fileType"];
            this.info = _data["info"] ? JsonNode.fromJS(_data["info"]) : <any>undefined;
            this.objectId = _data["objectId"];
            this.studyId = _data["studyId"];
        }
    }

    static fromJS(data: any): FileDTO {
        data = typeof data === 'object' ? data : {};
        let result = new FileDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["analysisId"] = this.analysisId;
        data["dataType"] = this.dataType;
        data["fileAccess"] = this.fileAccess;
        data["fileMd5sum"] = this.fileMd5sum;
        data["fileName"] = this.fileName;
        data["fileSize"] = this.fileSize;
        data["fileType"] = this.fileType;
        data["info"] = this.info ? this.info.toJSON() : <any>undefined;
        data["objectId"] = this.objectId;
        data["studyId"] = this.studyId;
        return data;
    }
}

export interface IFileDTO {
    analysisId?: string | undefined;
    dataType?: string | undefined;
    fileAccess?: string | undefined;
    fileMd5sum?: string | undefined;
    fileName?: string | undefined;
    fileSize?: number | undefined;
    fileType?: string | undefined;
    info?: JsonNode | undefined;
    objectId?: string | undefined;
    studyId?: string | undefined;

    [key: string]: any;
}

export class FileEntity implements IFileEntity {
    analysisId?: string | undefined;
    dataType?: string | undefined;
    fileAccess?: string | undefined;
    fileMd5sum?: string | undefined;
    fileName?: string | undefined;
    fileSize?: number | undefined;
    fileType?: string | undefined;
    info?: JsonNode | undefined;
    objectId?: string | undefined;
    studyId?: string | undefined;

    [key: string]: any;

    constructor(data?: IFileEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.analysisId = _data["analysisId"];
            this.dataType = _data["dataType"];
            this.fileAccess = _data["fileAccess"];
            this.fileMd5sum = _data["fileMd5sum"];
            this.fileName = _data["fileName"];
            this.fileSize = _data["fileSize"];
            this.fileType = _data["fileType"];
            this.info = _data["info"] ? JsonNode.fromJS(_data["info"]) : <any>undefined;
            this.objectId = _data["objectId"];
            this.studyId = _data["studyId"];
        }
    }

    static fromJS(data: any): FileEntity {
        data = typeof data === 'object' ? data : {};
        let result = new FileEntity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["analysisId"] = this.analysisId;
        data["dataType"] = this.dataType;
        data["fileAccess"] = this.fileAccess;
        data["fileMd5sum"] = this.fileMd5sum;
        data["fileName"] = this.fileName;
        data["fileSize"] = this.fileSize;
        data["fileType"] = this.fileType;
        data["info"] = this.info ? this.info.toJSON() : <any>undefined;
        data["objectId"] = this.objectId;
        data["studyId"] = this.studyId;
        return data;
    }
}

export interface IFileEntity {
    analysisId?: string | undefined;
    dataType?: string | undefined;
    fileAccess?: string | undefined;
    fileMd5sum?: string | undefined;
    fileName?: string | undefined;
    fileSize?: number | undefined;
    fileType?: string | undefined;
    info?: JsonNode | undefined;
    objectId?: string | undefined;
    studyId?: string | undefined;

    [key: string]: any;
}

export class FileUpdateRequest implements IFileUpdateRequest {
    dataType?: string | undefined;
    fileAccess?: string | undefined;
    fileMd5sum?: string | undefined;
    fileSize?: number | undefined;
    info?: JsonNode | undefined;

    [key: string]: any;

    constructor(data?: IFileUpdateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.dataType = _data["dataType"];
            this.fileAccess = _data["fileAccess"];
            this.fileMd5sum = _data["fileMd5sum"];
            this.fileSize = _data["fileSize"];
            this.info = _data["info"] ? JsonNode.fromJS(_data["info"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FileUpdateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new FileUpdateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["dataType"] = this.dataType;
        data["fileAccess"] = this.fileAccess;
        data["fileMd5sum"] = this.fileMd5sum;
        data["fileSize"] = this.fileSize;
        data["info"] = this.info ? this.info.toJSON() : <any>undefined;
        return data;
    }
}

export interface IFileUpdateRequest {
    dataType?: string | undefined;
    fileAccess?: string | undefined;
    fileMd5sum?: string | undefined;
    fileSize?: number | undefined;
    info?: JsonNode | undefined;

    [key: string]: any;
}

export class FileUpdateResponse implements IFileUpdateResponse {
    fileUpdateType?: FileUpdateResponseFileUpdateType | undefined;
    message?: string | undefined;
    originalAnalysisState?: FileUpdateResponseOriginalAnalysisState | undefined;
    originalFile?: FileDTO | undefined;
    unpublishedAnalysis?: boolean | undefined;

    [key: string]: any;

    constructor(data?: IFileUpdateResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.fileUpdateType = _data["fileUpdateType"];
            this.message = _data["message"];
            this.originalAnalysisState = _data["originalAnalysisState"];
            this.originalFile = _data["originalFile"] ? FileDTO.fromJS(_data["originalFile"]) : <any>undefined;
            this.unpublishedAnalysis = _data["unpublishedAnalysis"];
        }
    }

    static fromJS(data: any): FileUpdateResponse {
        data = typeof data === 'object' ? data : {};
        let result = new FileUpdateResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["fileUpdateType"] = this.fileUpdateType;
        data["message"] = this.message;
        data["originalAnalysisState"] = this.originalAnalysisState;
        data["originalFile"] = this.originalFile ? this.originalFile.toJSON() : <any>undefined;
        data["unpublishedAnalysis"] = this.unpublishedAnalysis;
        return data;
    }
}

export interface IFileUpdateResponse {
    fileUpdateType?: FileUpdateResponseFileUpdateType | undefined;
    message?: string | undefined;
    originalAnalysisState?: FileUpdateResponseOriginalAnalysisState | undefined;
    originalFile?: FileDTO | undefined;
    unpublishedAnalysis?: boolean | undefined;

    [key: string]: any;
}

export class GenericMessage implements IGenericMessage {
    message?: string | undefined;

    [key: string]: any;

    constructor(data?: IGenericMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): GenericMessage {
        data = typeof data === 'object' ? data : {};
        let result = new GenericMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["message"] = this.message;
        return data;
    }
}

export interface IGenericMessage {
    message?: string | undefined;

    [key: string]: any;
}

export class IdSearchRequest implements IIdSearchRequest {
    /** regex pattern. Default is wildcard */
    donorId?: string | undefined;
    /** regex pattern. Default is wildcard */
    objectId?: string | undefined;
    /** regex pattern. Default is wildcard */
    sampleId?: string | undefined;
    /** regex pattern. Default is wildcard */
    specimenId?: string | undefined;

    [key: string]: any;

    constructor(data?: IIdSearchRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.donorId = _data["donorId"];
            this.objectId = _data["objectId"];
            this.sampleId = _data["sampleId"];
            this.specimenId = _data["specimenId"];
        }
    }

    static fromJS(data: any): IdSearchRequest {
        data = typeof data === 'object' ? data : {};
        let result = new IdSearchRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["donorId"] = this.donorId;
        data["objectId"] = this.objectId;
        data["sampleId"] = this.sampleId;
        data["specimenId"] = this.specimenId;
        return data;
    }
}

export interface IIdSearchRequest {
    /** regex pattern. Default is wildcard */
    donorId?: string | undefined;
    /** regex pattern. Default is wildcard */
    objectId?: string | undefined;
    /** regex pattern. Default is wildcard */
    sampleId?: string | undefined;
    /** regex pattern. Default is wildcard */
    specimenId?: string | undefined;

    [key: string]: any;
}

export class JsonNode implements IJsonNode {
    array?: boolean | undefined;
    bigDecimal?: boolean | undefined;
    bigInteger?: boolean | undefined;
    binary?: boolean | undefined;
    boolean?: boolean | undefined;
    containerNode?: boolean | undefined;
    double?: boolean | undefined;
    float?: boolean | undefined;
    floatingPointNumber?: boolean | undefined;
    int?: boolean | undefined;
    integralNumber?: boolean | undefined;
    long?: boolean | undefined;
    missingNode?: boolean | undefined;
    nodeType?: JsonNodeNodeType | undefined;
    null?: boolean | undefined;
    number?: boolean | undefined;
    object?: boolean | undefined;
    pojo?: boolean | undefined;
    short?: boolean | undefined;
    textual?: boolean | undefined;
    valueNode?: boolean | undefined;

    [key: string]: any;

    constructor(data?: IJsonNode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.array = _data["array"];
            this.bigDecimal = _data["bigDecimal"];
            this.bigInteger = _data["bigInteger"];
            this.binary = _data["binary"];
            this.boolean = _data["boolean"];
            this.containerNode = _data["containerNode"];
            this.double = _data["double"];
            this.float = _data["float"];
            this.floatingPointNumber = _data["floatingPointNumber"];
            this.int = _data["int"];
            this.integralNumber = _data["integralNumber"];
            this.long = _data["long"];
            this.missingNode = _data["missingNode"];
            this.nodeType = _data["nodeType"];
            this.null = _data["null"];
            this.number = _data["number"];
            this.object = _data["object"];
            this.pojo = _data["pojo"];
            this.short = _data["short"];
            this.textual = _data["textual"];
            this.valueNode = _data["valueNode"];
        }
    }

    static fromJS(data: any): JsonNode {
        data = typeof data === 'object' ? data : {};
        let result = new JsonNode();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["array"] = this.array;
        data["bigDecimal"] = this.bigDecimal;
        data["bigInteger"] = this.bigInteger;
        data["binary"] = this.binary;
        data["boolean"] = this.boolean;
        data["containerNode"] = this.containerNode;
        data["double"] = this.double;
        data["float"] = this.float;
        data["floatingPointNumber"] = this.floatingPointNumber;
        data["int"] = this.int;
        data["integralNumber"] = this.integralNumber;
        data["long"] = this.long;
        data["missingNode"] = this.missingNode;
        data["nodeType"] = this.nodeType;
        data["null"] = this.null;
        data["number"] = this.number;
        data["object"] = this.object;
        data["pojo"] = this.pojo;
        data["short"] = this.short;
        data["textual"] = this.textual;
        data["valueNode"] = this.valueNode;
        return data;
    }
}

export interface IJsonNode {
    array?: boolean | undefined;
    bigDecimal?: boolean | undefined;
    bigInteger?: boolean | undefined;
    binary?: boolean | undefined;
    boolean?: boolean | undefined;
    containerNode?: boolean | undefined;
    double?: boolean | undefined;
    float?: boolean | undefined;
    floatingPointNumber?: boolean | undefined;
    int?: boolean | undefined;
    integralNumber?: boolean | undefined;
    long?: boolean | undefined;
    missingNode?: boolean | undefined;
    nodeType?: JsonNodeNodeType | undefined;
    null?: boolean | undefined;
    number?: boolean | undefined;
    object?: boolean | undefined;
    pojo?: boolean | undefined;
    short?: boolean | undefined;
    textual?: boolean | undefined;
    valueNode?: boolean | undefined;

    [key: string]: any;
}

export class Legacy implements ILegacy {
    access?: string | undefined;
    fileName?: string | undefined;
    gnosId?: string | undefined;
    id?: string | undefined;
    projectCode?: string | undefined;

    [key: string]: any;

    constructor(data?: ILegacy) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.access = _data["access"];
            this.fileName = _data["fileName"];
            this.gnosId = _data["gnosId"];
            this.id = _data["id"];
            this.projectCode = _data["projectCode"];
        }
    }

    static fromJS(data: any): Legacy {
        data = typeof data === 'object' ? data : {};
        let result = new Legacy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["access"] = this.access;
        data["fileName"] = this.fileName;
        data["gnosId"] = this.gnosId;
        data["id"] = this.id;
        data["projectCode"] = this.projectCode;
        return data;
    }
}

export interface ILegacy {
    access?: string | undefined;
    fileName?: string | undefined;
    gnosId?: string | undefined;
    id?: string | undefined;
    projectCode?: string | undefined;

    [key: string]: any;
}

export class PageDTO_AnalysisType implements IPageDTO_AnalysisType {
    count?: number | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
    resultSet?: AnalysisType[] | undefined;

    [key: string]: any;

    constructor(data?: IPageDTO_AnalysisType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.count = _data["count"];
            this.limit = _data["limit"];
            this.offset = _data["offset"];
            if (Array.isArray(_data["resultSet"])) {
                this.resultSet = [] as any;
                for (let item of _data["resultSet"])
                    this.resultSet!.push(AnalysisType.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageDTO_AnalysisType {
        data = typeof data === 'object' ? data : {};
        let result = new PageDTO_AnalysisType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["count"] = this.count;
        data["limit"] = this.limit;
        data["offset"] = this.offset;
        if (Array.isArray(this.resultSet)) {
            data["resultSet"] = [];
            for (let item of this.resultSet)
                data["resultSet"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPageDTO_AnalysisType {
    count?: number | undefined;
    limit?: number | undefined;
    offset?: number | undefined;
    resultSet?: AnalysisType[] | undefined;

    [key: string]: any;
}

export class RegisterAnalysisTypeRequest implements IRegisterAnalysisTypeRequest {
    name?: string | undefined;
    schema?: JsonNode | undefined;

    [key: string]: any;

    constructor(data?: IRegisterAnalysisTypeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.name = _data["name"];
            this.schema = _data["schema"] ? JsonNode.fromJS(_data["schema"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RegisterAnalysisTypeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterAnalysisTypeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["name"] = this.name;
        data["schema"] = this.schema ? this.schema.toJSON() : <any>undefined;
        return data;
    }
}

export interface IRegisterAnalysisTypeRequest {
    name?: string | undefined;
    schema?: JsonNode | undefined;

    [key: string]: any;
}

export class Sample implements ISample {
    info?: JsonNode | undefined;
    matchedNormalSubmitterSampleId?: string | undefined;
    sampleId?: string | undefined;
    sampleType?: string | undefined;
    specimenId?: string | undefined;
    submitterSampleId?: string | undefined;

    [key: string]: any;

    constructor(data?: ISample) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.info = _data["info"] ? JsonNode.fromJS(_data["info"]) : <any>undefined;
            this.matchedNormalSubmitterSampleId = _data["matchedNormalSubmitterSampleId"];
            this.sampleId = _data["sampleId"];
            this.sampleType = _data["sampleType"];
            this.specimenId = _data["specimenId"];
            this.submitterSampleId = _data["submitterSampleId"];
        }
    }

    static fromJS(data: any): Sample {
        data = typeof data === 'object' ? data : {};
        let result = new Sample();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["info"] = this.info ? this.info.toJSON() : <any>undefined;
        data["matchedNormalSubmitterSampleId"] = this.matchedNormalSubmitterSampleId;
        data["sampleId"] = this.sampleId;
        data["sampleType"] = this.sampleType;
        data["specimenId"] = this.specimenId;
        data["submitterSampleId"] = this.submitterSampleId;
        return data;
    }
}

export interface ISample {
    info?: JsonNode | undefined;
    matchedNormalSubmitterSampleId?: string | undefined;
    sampleId?: string | undefined;
    sampleType?: string | undefined;
    specimenId?: string | undefined;
    submitterSampleId?: string | undefined;

    [key: string]: any;
}

export class Specimen implements ISpecimen {
    donorId?: string | undefined;
    info?: JsonNode | undefined;
    specimenId?: string | undefined;
    specimenTissueSource?: string | undefined;
    specimenType?: string | undefined;
    submitterSpecimenId?: string | undefined;
    tumourNormalDesignation?: string | undefined;

    [key: string]: any;

    constructor(data?: ISpecimen) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.donorId = _data["donorId"];
            this.info = _data["info"] ? JsonNode.fromJS(_data["info"]) : <any>undefined;
            this.specimenId = _data["specimenId"];
            this.specimenTissueSource = _data["specimenTissueSource"];
            this.specimenType = _data["specimenType"];
            this.submitterSpecimenId = _data["submitterSpecimenId"];
            this.tumourNormalDesignation = _data["tumourNormalDesignation"];
        }
    }

    static fromJS(data: any): Specimen {
        data = typeof data === 'object' ? data : {};
        let result = new Specimen();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["donorId"] = this.donorId;
        data["info"] = this.info ? this.info.toJSON() : <any>undefined;
        data["specimenId"] = this.specimenId;
        data["specimenTissueSource"] = this.specimenTissueSource;
        data["specimenType"] = this.specimenType;
        data["submitterSpecimenId"] = this.submitterSpecimenId;
        data["tumourNormalDesignation"] = this.tumourNormalDesignation;
        return data;
    }
}

export interface ISpecimen {
    donorId?: string | undefined;
    info?: JsonNode | undefined;
    specimenId?: string | undefined;
    specimenTissueSource?: string | undefined;
    specimenType?: string | undefined;
    submitterSpecimenId?: string | undefined;
    tumourNormalDesignation?: string | undefined;

    [key: string]: any;
}

export class SpecimenWithSamples implements ISpecimenWithSamples {
    donorId?: string | undefined;
    info?: JsonNode | undefined;
    samples?: Sample[] | undefined;
    specimen?: Specimen | undefined;
    specimenId?: string | undefined;
    specimenTissueSource?: string | undefined;
    specimenType?: string | undefined;
    submitterSpecimenId?: string | undefined;
    tumourNormalDesignation?: string | undefined;

    [key: string]: any;

    constructor(data?: ISpecimenWithSamples) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.donorId = _data["donorId"];
            this.info = _data["info"] ? JsonNode.fromJS(_data["info"]) : <any>undefined;
            if (Array.isArray(_data["samples"])) {
                this.samples = [] as any;
                for (let item of _data["samples"])
                    this.samples!.push(Sample.fromJS(item));
            }
            this.specimen = _data["specimen"] ? Specimen.fromJS(_data["specimen"]) : <any>undefined;
            this.specimenId = _data["specimenId"];
            this.specimenTissueSource = _data["specimenTissueSource"];
            this.specimenType = _data["specimenType"];
            this.submitterSpecimenId = _data["submitterSpecimenId"];
            this.tumourNormalDesignation = _data["tumourNormalDesignation"];
        }
    }

    static fromJS(data: any): SpecimenWithSamples {
        data = typeof data === 'object' ? data : {};
        let result = new SpecimenWithSamples();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["donorId"] = this.donorId;
        data["info"] = this.info ? this.info.toJSON() : <any>undefined;
        if (Array.isArray(this.samples)) {
            data["samples"] = [];
            for (let item of this.samples)
                data["samples"].push(item.toJSON());
        }
        data["specimen"] = this.specimen ? this.specimen.toJSON() : <any>undefined;
        data["specimenId"] = this.specimenId;
        data["specimenTissueSource"] = this.specimenTissueSource;
        data["specimenType"] = this.specimenType;
        data["submitterSpecimenId"] = this.submitterSpecimenId;
        data["tumourNormalDesignation"] = this.tumourNormalDesignation;
        return data;
    }
}

export interface ISpecimenWithSamples {
    donorId?: string | undefined;
    info?: JsonNode | undefined;
    samples?: Sample[] | undefined;
    specimen?: Specimen | undefined;
    specimenId?: string | undefined;
    specimenTissueSource?: string | undefined;
    specimenType?: string | undefined;
    submitterSpecimenId?: string | undefined;
    tumourNormalDesignation?: string | undefined;

    [key: string]: any;
}

export class Study implements IStudy {
    description?: string | undefined;
    info?: JsonNode | undefined;
    name?: string | undefined;
    organization?: string | undefined;
    studyId?: string | undefined;

    [key: string]: any;

    constructor(data?: IStudy) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.description = _data["description"];
            this.info = _data["info"] ? JsonNode.fromJS(_data["info"]) : <any>undefined;
            this.name = _data["name"];
            this.organization = _data["organization"];
            this.studyId = _data["studyId"];
        }
    }

    static fromJS(data: any): Study {
        data = typeof data === 'object' ? data : {};
        let result = new Study();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["description"] = this.description;
        data["info"] = this.info ? this.info.toJSON() : <any>undefined;
        data["name"] = this.name;
        data["organization"] = this.organization;
        data["studyId"] = this.studyId;
        return data;
    }
}

export interface IStudy {
    description?: string | undefined;
    info?: JsonNode | undefined;
    name?: string | undefined;
    organization?: string | undefined;
    studyId?: string | undefined;

    [key: string]: any;
}

export class StudyWithDonors implements IStudyWithDonors {
    description?: string | undefined;
    donors?: DonorWithSpecimens[] | undefined;
    info?: JsonNode | undefined;
    name?: string | undefined;
    organization?: string | undefined;
    studyId?: string | undefined;

    [key: string]: any;

    constructor(data?: IStudyWithDonors) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.description = _data["description"];
            if (Array.isArray(_data["donors"])) {
                this.donors = [] as any;
                for (let item of _data["donors"])
                    this.donors!.push(DonorWithSpecimens.fromJS(item));
            }
            this.info = _data["info"] ? JsonNode.fromJS(_data["info"]) : <any>undefined;
            this.name = _data["name"];
            this.organization = _data["organization"];
            this.studyId = _data["studyId"];
        }
    }

    static fromJS(data: any): StudyWithDonors {
        data = typeof data === 'object' ? data : {};
        let result = new StudyWithDonors();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["description"] = this.description;
        if (Array.isArray(this.donors)) {
            data["donors"] = [];
            for (let item of this.donors)
                data["donors"].push(item.toJSON());
        }
        data["info"] = this.info ? this.info.toJSON() : <any>undefined;
        data["name"] = this.name;
        data["organization"] = this.organization;
        data["studyId"] = this.studyId;
        return data;
    }
}

export interface IStudyWithDonors {
    description?: string | undefined;
    donors?: DonorWithSpecimens[] | undefined;
    info?: JsonNode | undefined;
    name?: string | undefined;
    organization?: string | undefined;
    studyId?: string | undefined;

    [key: string]: any;
}

export class SubmitResponse implements ISubmitResponse {
    analysisId?: string | undefined;
    status?: string | undefined;

    [key: string]: any;

    constructor(data?: ISubmitResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.analysisId = _data["analysisId"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): SubmitResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SubmitResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["analysisId"] = this.analysisId;
        data["status"] = this.status;
        return data;
    }
}

export interface ISubmitResponse {
    analysisId?: string | undefined;
    status?: string | undefined;

    [key: string]: any;
}

export class Anonymous implements IAnonymous {

    [key: string]: any;

    constructor(data?: IAnonymous) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Anonymous {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IAnonymous {

    [key: string]: any;
}

export enum FileUpdateResponseFileUpdateType {
    NO_UPDATE = "NO_UPDATE",
    CONTENT_UPDATE = "CONTENT_UPDATE",
    METADATA_UPDATE = "METADATA_UPDATE",
}

export enum FileUpdateResponseOriginalAnalysisState {
    PUBLISHED = "PUBLISHED",
    UNPUBLISHED = "UNPUBLISHED",
    SUPPRESSED = "SUPPRESSED",
}

export enum JsonNodeNodeType {
    ARRAY = "ARRAY",
    BINARY = "BINARY",
    BOOLEAN = "BOOLEAN",
    MISSING = "MISSING",
    NULL = "NULL",
    NUMBER = "NUMBER",
    OBJECT = "OBJECT",
    POJO = "POJO",
    STRING = "STRING",
}

}